import argparse
import numpy as np
import matplotlib.pyplot as plt
import os
from scipy import signal as sg
#plt.rcParams.update({
    #"text.usetex": True,
    #"font.family": "sans-serif",
    #"font.sans-serif": ["Helvetica"],
    #'font.size': 20})

from data_lib import params_linear_2D  #, params_linear
#from data_lib import params_circular  #, params_linear

def plot2pgf(temp, filename, folder='./'):
    """
    :param temp: list of equally-long data
    :param filename: filename without extension nor path
    :param folder: folder where to save
    """
    if not os.path.exists(folder):
        os.makedirs(folder)
    np.savetxt(os.path.join(folder, filename + '.txt'), np.asarray(temp).T, fmt="%f", encoding='ascii')

def main():
    # Arguments parse
    parser = argparse.ArgumentParser(description='Generate data for linear array setup')
    parser.add_argument('--dataset_path', type=str, help="Base Data Directory", default='/nas/home/ralessandri/thesis_project/dataset/')
    #parser.add_argument('--dataset_path', type=str, help="Base Data Directory", default='C:/Users/rales/OneDrive/Desktop/POLIMI/TESI/dataset/test/')
    parser.add_argument('--array_type', type=str, help="Array Configuration", default='linear')
    parser.add_argument('--n_loudspeakers', type=int, help='number missing loudspeakers',
                        default=64)
    args = parser.parse_args()
    array_type = args.array_type
    print("array_type = {} ".format(array_type))

    nmse = np.load(os.path.join(args.dataset_path, array_type+'_array', 'nmse_nl_' + str(args.n_loudspeakers)+'.npz'))
    nmseAbs = np.load(os.path.join(args.dataset_path, array_type+'_array', 'nmseAbs_nl_' + str(args.n_loudspeakers)+'.npz'))
    nmseAngle = np.load(os.path.join(args.dataset_path, array_type+'_array', 'nmseAngle_nl_' + str(args.n_loudspeakers)+'.npz'))
    ssim = np.load(os.path.join(args.dataset_path, array_type+'_array', 'ssim_nl_' + str(args.n_loudspeakers)+'.npz'))
    ac = np.load(os.path.join(args.dataset_path, array_type+'_array', 'ac_nl_' + str(args.n_loudspeakers)+'.npz'))


    nmse_B = np.load(os.path.join(args.dataset_path, array_type+'_array', 'nmse_B_nl_' + str(args.n_loudspeakers)+'.npz'))
    nmseAbs_B = np.load(os.path.join(args.dataset_path, array_type+'_array', 'nmseAbs_B_nl_' + str(args.n_loudspeakers)+'.npz'))
    nmseAngle_B = np.load(os.path.join(args.dataset_path, array_type+'_array', 'nmseAngle_B_nl_' + str(args.n_loudspeakers)+'.npz'))
    ssim_B = np.load(os.path.join(args.dataset_path, array_type+'_array', 'ssim_B_nl_' + str(args.n_loudspeakers)+'.npz'))


    nmse_D = np.load(os.path.join(args.dataset_path, array_type+'_array', 'nmse_D_nl_' + str(args.n_loudspeakers)+'.npz'))
    nmseAbs_D = np.load(os.path.join(args.dataset_path, array_type+'_array', 'nmseAbs_D_nl_' + str(args.n_loudspeakers)+'.npz'))
    nmseAngle_D = np.load(os.path.join(args.dataset_path, array_type+'_array', 'nmseAngle_D_nl_' + str(args.n_loudspeakers)+'.npz'))
    ssim_D = np.load(os.path.join(args.dataset_path, array_type+'_array', 'ssim_D_nl_' + str(args.n_loudspeakers)+'.npz'))



    nmse_pwd_cnn, nmse_pm, nmse_acc, nmse_am = np.real(nmse['nmse_pwd_cnn']), np.real(nmse['nmse_pwd_pm']), np.real(nmse['nmse_pwd_acc']), np.real(nmse['nmse_pwd_am'])
    nmseAbs_pwd_cnn, nmseAbs_pm, nmseAbs_acc, nmseAbs_am = np.real(nmseAbs['nmseAbs_pwd_cnn']), np.real(nmseAbs['nmseAbs_pwd_pm']), np.real(nmseAbs['nmseAbs_pwd_acc']), np.real(nmseAbs['nmseAbs_pwd_am'])
    nmseAngle_pwd_cnn, nmseAngle_pm, nmseAngle_acc, nmseAngle_am = np.real(nmseAngle['nmseAngle_pwd_cnn']), np.real(nmseAngle['nmseAngle_pwd_pm']), np.real(nmseAngle['nmseAngle_pwd_acc']), np.real(nmseAngle['nmseAngle_pwd_am'])
    ssim_pwd_cnn, ssim_pm, ssim_acc, ssim_am = np.real(ssim['ssim_pwd_cnn']), np.real(ssim['ssim_pwd_pm']), np.real(ssim['ssim_pwd_acc']), np.real(ssim['ssim_pwd_am'])
    ac_pwd_cnn, ac_pm, ac_acc, ac_am = np.real(ac['ac_pwd_cnn']), np.real(ac['ac_pwd_pm']), np.real(ac['ac_pwd_acc']), np.real(ac['ac_pwd_am'])


    nmse_pwd_cnn_B, nmse_pm_B, nmse_acc_B, nmse_am_B = np.real(nmse_B['nmse_pwd_cnn']), np.real(nmse_B['nmse_pwd_pm']), np.real(nmse_B['nmse_pwd_acc']), np.real(nmse_B['nmse_pwd_am'])
    nmseAbs_pwd_cnn_B, nmseAbs_pm_B, nmseAbs_acc_B, nmseAbs_am_B = np.real(nmseAbs_B['nmseAbs_pwd_cnn']), np.real(nmseAbs_B['nmseAbs_pwd_pm']), np.real(nmseAbs_B['nmseAbs_pwd_acc']), np.real(nmseAbs_B['nmseAbs_pwd_am'])
    nmseAngle_pwd_cnn_B, nmseAngle_pm_B, nmseAngle_acc_B, nmseAngle_am_B = np.real(nmseAngle_B['nmseAngle_pwd_cnn']), np.real(nmseAngle_B['nmseAngle_pwd_pm']), np.real(nmseAngle_B['nmseAngle_pwd_acc']), np.real(nmseAngle_B['nmseAngle_pwd_am'])
    ssim_pwd_cnn_B, ssim_pm_B, ssim_acc_B, ssim_am_B = np.real(ssim_B['ssim_pwd_cnn']), np.real(ssim_B['ssim_pwd_pm']), np.real(ssim_B['ssim_pwd_acc']), np.real(ssim_B['ssim_pwd_am'])

    nmse_pwd_cnn_D, nmse_pm_D, nmse_acc_D, nmse_am_D = np.real(nmse_D['nmse_pwd_cnn']), np.real(nmse_D['nmse_pwd_pm']), np.real(nmse_D['nmse_pwd_acc']), np.real(nmse_D['nmse_pwd_am'])
    nmseAbs_pwd_cnn_D, nmseAbs_pm_D, nmseAbs_acc_D, nmseAbs_am_D = np.real(nmseAbs_D['nmseAbs_pwd_cnn']), np.real(nmseAbs_D['nmseAbs_pwd_pm']), np.real(nmseAbs_D['nmseAbs_pwd_acc']), np.real(nmseAbs_D['nmseAbs_pwd_am'])
    nmseAngle_pwd_cnn_D, nmseAngle_pm_D, nmseAngle_acc_D, nmseAngle_am_D = np.real(nmseAngle_D['nmseAngle_pwd_cnn']), np.real(nmseAngle_D['nmseAngle_pwd_pm']), np.real(nmseAngle_D['nmseAngle_pwd_acc']), np.real(nmseAngle_D['nmseAngle_pwd_am'])
    ssim_pwd_cnn_D, ssim_pm_D, ssim_acc_D, ssim_am_D = np.real(ssim_D['ssim_pwd_cnn']), np.real(ssim_D['ssim_pwd_pm']), np.real(ssim_D['ssim_pwd_acc']), np.real(ssim_D['ssim_pwd_am'])

    print("nmse, ssim = {}, {}".format(np.shape(nmse_pwd_cnn), np.shape(ssim_pwd_cnn)))
    print("nmse_B, ssim_B = {}, {}".format(np.shape(nmse_pwd_cnn_B), np.shape(ssim_pwd_cnn_B)))
    print("nmse_D, ssim_D = {}, {}".format(np.shape(nmse_pwd_cnn_D), np.shape(ssim_pwd_cnn_D)))


    os.path.join(args.dataset_path, array_type, 'nmse_'+str(args.n_loudspeakers)+'.npz')
    os.path.join(args.dataset_path, array_type, 'nmse_B_'+str(args.n_loudspeakers)+'.npz')
    os.path.join(args.dataset_path, array_type, 'nmse_D_'+str(args.n_loudspeakers)+'.npz')


    pgf_dataset_path = os.path.join(args.dataset_path, array_type + '_array', 'pgfplot')

    if args.array_type == 'linear':
        # Let's store the data in arrays more suitable for saving them (and then re-using them in pgfplot)
        print("Division by 0 investigation")
        print('1) nmse_pwd_cnn = {}\nreshape = {}\nmean = {}\nlog\0 = {}'.format(nmse_pwd_cnn, np.reshape(nmse_pwd_cnn + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), np.mean(np.reshape(nmse_pwd_cnn + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0), np.log10(np.mean(np.reshape(nmse_pwd_cnn + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))))
        print('1) nmse_pwd_cnn_B = {}\nreshape = {}\nmean = {}\nlog\0 = {}'.format(nmse_pwd_cnn_B, np.reshape(nmse_pwd_cnn_B + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), np.mean(np.reshape(nmse_pwd_cnn_B + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0), np.log10(np.mean(np.reshape(nmse_pwd_cnn_B + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))))
        print('1) nmse_pwd_cnn_D = {}\nreshape = {}\nmean = {}\nlog\0 = {}'.format(nmse_pwd_cnn_D, np.reshape(nmse_pwd_cnn_D + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), np.mean(np.reshape(nmse_pwd_cnn_D + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0), np.log10(np.mean(np.reshape(nmse_pwd_cnn_D + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))))


        f_axis_plot = np.round(params_linear_2D.f_axis, 1)

        nmse_pwd_cnn_freq_db = 10*np.log10(np.mean(np.reshape(nmse_pwd_cnn + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))
        nmse_pm_freq_db = 10*np.log10(np.mean(np.reshape(nmse_pm + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmse_acc_freq_db = 10*np.log10(np.mean(np.reshape(nmse_acc + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmse_am_freq_db = 10*np.log10(np.mean(np.reshape(nmse_am + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAbs_pwd_cnn_freq_db = 10*np.log10(np.mean(np.reshape(nmseAbs_pwd_cnn + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))
        nmseAbs_pm_freq_db = 10*np.log10(np.mean(np.reshape(nmseAbs_pm + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAbs_acc_freq_db = 10*np.log10(np.mean(np.reshape(nmseAbs_acc + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAbs_am_freq_db = 10*np.log10(np.mean(np.reshape(nmseAbs_am + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAngle_pwd_cnn_freq_db = 10*np.log10(np.mean(np.reshape(nmseAngle_pwd_cnn + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))
        nmseAngle_pm_freq_db = 10*np.log10(np.mean(np.reshape(nmseAngle_pm + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAngle_acc_freq_db = 10*np.log10(np.mean(np.reshape(nmseAngle_acc + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAngle_am_freq_db = 10*np.log10(np.mean(np.reshape(nmseAngle_am + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        ssim_pwd_cnn_freq = np.mean(np.reshape(ssim_pwd_cnn + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ssim_pm_freq =  np.mean(np.reshape(ssim_pm + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ssim_acc_freq =  np.mean(np.reshape(ssim_acc + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ssim_am_freq =  np.mean(np.reshape(ssim_am + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ac_pwd_cnn_freq = np.mean(np.reshape(ac_pwd_cnn + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ac_pm_freq =  np.mean(np.reshape(ac_pm + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ac_acc_freq =  np.mean(np.reshape(ac_acc + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ac_am_freq =  np.mean(np.reshape(ac_am + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)


        nmse_pwd_cnn_freq_db_B = 10*np.log10(np.mean(np.reshape(nmse_pwd_cnn_B + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))
        nmse_pm_freq_db_B = 10*np.log10(np.mean(np.reshape(nmse_pm_B + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmse_acc_freq_db_B = 10*np.log10(np.mean(np.reshape(nmse_acc_B + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmse_am_freq_db_B = 10*np.log10(np.mean(np.reshape(nmse_am_B + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAbs_pwd_cnn_freq_db_B = 10*np.log10(np.mean(np.reshape(nmseAbs_pwd_cnn_B + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))
        nmseAbs_pm_freq_db_B = 10*np.log10(np.mean(np.reshape(nmseAbs_pm_B + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAbs_acc_freq_db_B = 10*np.log10(np.mean(np.reshape(nmseAbs_acc_B + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAbs_am_freq_db_B= 10*np.log10(np.mean(np.reshape(nmseAbs_am_B + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAngle_pwd_cnn_freq_db_B = 10*np.log10(np.mean(np.reshape(nmseAngle_pwd_cnn_B + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))
        nmseAngle_pm_freq_db_B = 10*np.log10(np.mean(np.reshape(nmseAngle_pm_B + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAngle_acc_freq_db_B = 10*np.log10(np.mean(np.reshape(nmseAngle_acc_B + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAngle_am_freq_db_B = 10*np.log10(np.mean(np.reshape(nmseAngle_am_B + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        ssim_pwd_cnn_freq_B = np.mean(np.reshape(ssim_pwd_cnn_B + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ssim_pm_freq_B =  np.mean(np.reshape(ssim_pm_B + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ssim_acc_freq_B =  np.mean(np.reshape(ssim_acc_B + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ssim_am_freq_B =  np.mean(np.reshape(ssim_am_B + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)


        nmse_pwd_cnn_freq_db_D = 10*np.log10(np.mean(np.reshape(nmse_pwd_cnn_D + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))
        nmse_pm_freq_db_D = 10*np.log10(np.mean(np.reshape(nmse_pm_D + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmse_acc_freq_db_D = 10*np.log10(np.mean(np.reshape(nmse_acc_D + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmse_am_freq_db_D = 10*np.log10(np.mean(np.reshape(nmse_am_D + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAbs_pwd_cnn_freq_db_D = 10*np.log10(np.mean(np.reshape(nmseAbs_pwd_cnn_D + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))
        nmseAbs_pm_freq_db_D = 10*np.log10(np.mean(np.reshape(nmseAbs_pm_D + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAbs_acc_freq_db_D = 10*np.log10(np.mean(np.reshape(nmseAbs_acc_D + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAbs_am_freq_db_D = 10*np.log10(np.mean(np.reshape(nmseAbs_am_D + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAngle_pwd_cnn_freq_db_D = 10*np.log10(np.mean(np.reshape(nmseAngle_pwd_cnn_D + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0))
        nmseAngle_pm_freq_db_D = 10*np.log10(np.mean(np.reshape(nmseAngle_pm_D + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAngle_acc_freq_db_D = 10*np.log10(np.mean(np.reshape(nmseAngle_acc_D + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        nmseAngle_am_freq_db_D = 10*np.log10(np.mean(np.reshape(nmseAngle_am_D + np.finfo(np.float16).eps, (-1,params_linear_2D.N_freqs)), axis=0))
        ssim_pwd_cnn_freq_D = np.mean(np.reshape(ssim_pwd_cnn_D + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ssim_pm_freq_D =  np.mean(np.reshape(ssim_pm_D + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ssim_acc_freq_D =  np.mean(np.reshape(ssim_acc_D + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)
        ssim_am_freq_D =  np.mean(np.reshape(ssim_am_D + np.finfo(np.float16).eps, (-1, params_linear_2D.N_freqs)), axis=0)


        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_pwd_cnn_freq_db, 11, 1)], 'nmse_pwd_cnn_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_pm_freq_db, 11, 1)], 'nmse_pm_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_acc_freq_db, 11, 1)], 'nmse_acc_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_am_freq_db, 11, 1)], 'nmse_am_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_pwd_cnn_freq_db, 11, 1)], 'nmseAbs_pwd_cnn_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_pm_freq_db, 11, 1)], 'nmseAbs_pm_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_acc_freq_db, 11, 1)], 'nmseAbs_acc_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_am_freq_db, 11, 1)], 'nmseAbs_am_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_pwd_cnn_freq_db, 11, 1)], 'nmseAngle_pwd_cnn_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_pm_freq_db, 11, 1)], 'nmseAngle_pm_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_acc_freq_db, 11, 1)], 'nmseAngle_acc_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_am_freq_db, 11, 1)], 'nmseAngle_am_freq_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_pwd_cnn_freq, 11, 1)], 'ssim_pwd_cnn_freq'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_pm_freq, 11, 1)], 'ssim_pm_freq'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_acc_freq, 11, 1)], 'ssim_acc_freq'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_am_freq, 11, 1)], 'ssim_am_freq'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ac_pwd_cnn_freq, 11, 1)], 'ac_pwd_cnn_freq'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ac_pm_freq, 11, 1)], 'ac_pm_freq'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ac_acc_freq, 11, 1)], 'ac_acc_freq'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ac_am_freq, 11, 1)], 'ac_am_freq'+str(args.n_loudspeakers), folder=pgf_dataset_path)

        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_pwd_cnn_freq_db_B, 11, 1)], 'nmse_pwd_cnn_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_pm_freq_db_B, 11, 1)], 'nmse_pm_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_acc_freq_db_B, 11, 1)], 'nmse_acc_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_am_freq_db_B, 11, 1)], 'nmse_am_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_pwd_cnn_freq_db_B, 11, 1)], 'nmseAbs_pwd_cnn_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_pm_freq_db_B, 11, 1)], 'nmseAbs_pm_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_acc_freq_db_B, 11, 1)], 'nmseAbs_acc_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_am_freq_db_B, 11, 1)], 'nmseAbs_am_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_pwd_cnn_freq_db_B, 11, 1)], 'nmseAngle_pwd_cnn_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_pm_freq_db_B, 11, 1)], 'nmseAngle_pm_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_acc_freq_db_B, 11, 1)], 'nmseAngle_acc_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_am_freq_db_B, 11, 1)], 'nmseAngle_am_freq_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_pwd_cnn_freq_B, 11, 1)], 'ssim_pwd_cnn_freq_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_pm_freq_B, 11, 1)], 'ssim_pm_freq_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_acc_freq_B, 11, 1)], 'ssim_acc_freq_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_am_freq_B, 11, 1)], 'ssim_am_freq_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)

        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_pwd_cnn_freq_db_D, 11, 1)], 'nmse_pwd_cnn_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_pm_freq_db_D, 11, 1)], 'nmse_pm_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_acc_freq_db_D, 11, 1)], 'nmse_acc_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmse_am_freq_db_D, 11, 1)], 'nmse_am_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_pwd_cnn_freq_db_D, 11, 1)], 'nmseAbs_pwd_cnn_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_pm_freq_db_D, 11, 1)], 'nmseAbs_pm_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_acc_freq_db_D, 11, 1)], 'nmseAbs_acc_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAbs_am_freq_db_D, 11, 1)], 'nmseAbs_am_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_pwd_cnn_freq_db_D, 11, 1)], 'nmseAngle_pwd_cnn_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_pm_freq_db_D, 11, 1)], 'nmseAngle_pm_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_acc_freq_db_D, 11, 1)], 'nmseAngle_acc_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(nmseAngle_am_freq_db_D, 11, 1)], 'nmseAngle_am_freq_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_pwd_cnn_freq_D, 11, 1)], 'ssim_pwd_cnn_freq_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_pm_freq_D, 11, 1)], 'ssim_pm_freq_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_acc_freq_D, 11, 1)], 'ssim_acc_freq_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([f_axis_plot, sg.savgol_filter(ssim_am_freq_D, 11, 1)], 'ssim_am_freq_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)

        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_pwd_cnn_freq_db, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_pm_freq_db, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_acc_freq_db, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_am_freq_db, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE$', fontsize=35)
        plt.show()
        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_pwd_cnn_freq_db_B, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_pm_freq_db_B, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_acc_freq_db_B, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_am_freq_db_B, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{b}$', fontsize=35)
        plt.show()
        #plt.subplot(221)
        plt.figure(figsize=(20, 9))
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_pwd_cnn_freq_db_D, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_pm_freq_db_D, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_acc_freq_db_D, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmse_am_freq_db_D, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{d}$', fontsize=35)
        plt.show()

        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_pwd_cnn_freq_db, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_pm_freq_db, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_acc_freq_db, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_am_freq_db, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Abs}$', fontsize=35)
        plt.show()
        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_pwd_cnn_freq_db_B, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_pm_freq_db_B, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_acc_freq_db_B, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_am_freq_db_B, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Abs, b}$', fontsize=35)
        plt.show()
        #plt.subplot(221)
        plt.figure(figsize=(20, 9))
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_pwd_cnn_freq_db_D, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_pm_freq_db_D, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_acc_freq_db_D, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAbs_am_freq_db_D, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Abs, d}$', fontsize=35)
        plt.show()

        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_pwd_cnn_freq_db, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_pm_freq_db, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_acc_freq_db, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_am_freq_db, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Angle}$', fontsize=35)
        plt.show()
        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_pwd_cnn_freq_db_B, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_pm_freq_db_B, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_acc_freq_db_B, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_am_freq_db_B, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Angle, b}$', fontsize=35)
        plt.show()
        #plt.subplot(221)
        plt.figure(figsize=(20, 9))
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_pwd_cnn_freq_db_D, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_pm_freq_db_D, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_acc_freq_db_D, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(nmseAngle_am_freq_db_D, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Angle, d}$', fontsize=35)
        plt.show()

        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(f_axis_plot, sg.savgol_filter(ssim_pwd_cnn_freq_B, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(ssim_pm_freq_B, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(ssim_acc_freq_B, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(ssim_am_freq_B, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$SSIM$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$SSIM_{b}$', fontsize=35)
        plt.show()

        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(f_axis_plot, sg.savgol_filter(ac_pwd_cnn_freq, 11, 1), 'k-')
        plt.plot(f_axis_plot, sg.savgol_filter(ac_pm_freq, 11, 1), 'r*-')
        plt.plot(f_axis_plot, sg.savgol_filter(ac_acc_freq, 11, 1), 'g*-')
        plt.plot(f_axis_plot, sg.savgol_filter(ac_am_freq, 11, 1), 'b*-')
        plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$AC [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$AC$', fontsize=35)
        plt.show()

        #plt.subplot(212)
        #plt.figure(figsize=(20, 9))
        #plt.plot(f_axis_plot, ssim_pwd_cnn_freq_D, 'rd-')
        #plt.plot(f_axis_plot, ssim_pm_freq_D, 'k*-')
        #plt.xlabel('$f [Hz]$', fontsize=35), plt.ylabel('$SSIM$', fontsize=35)
        #plt.tick_params(axis='both', which='major', labelsize=30)
        #plt.legend([ '$\mathrm{PWD_{CNN}}$', '$\mathrm{PM}$'], prop={"size": 30})
        #plt.title('Dark - SSIM')
        #plt.show()

        # Plot w.r.t radius distance
        n_f = 41
        r_axis_plot = np.round(params_linear_2D.src_pos_test.T[:].T[0],1)
        idxs = []
        min = -4
        for i in range(len(r_axis_plot)):
            if r_axis_plot[i] > min:
                min = r_axis_plot[i]
                idxs.append(i)

        f_axis_plot = np.round(params_linear_2D.f_axis, 1)
        nmse_pwd_cnn_radius_db = 10*np.log10(np.mean(nmse_pwd_cnn[:, :], axis=1))
        nmse_pm_radius_db = 10*np.log10(np.mean(nmse_pm[:, :], axis=1))
        nmse_acc_radius_db = 10*np.log10(np.mean(nmse_acc[:, :], axis=1))
        nmse_am_radius_db = 10*np.log10(np.mean(nmse_am[:, :], axis=1))
        nmseAbs_pwd_cnn_radius_db = 10*np.log10(np.mean(nmseAbs_pwd_cnn[:, :], axis=1))
        nmseAbs_pm_radius_db = 10*np.log10(np.mean(nmseAbs_pm[:, :], axis=1))
        nmseAbs_acc_radius_db = 10*np.log10(np.mean(nmseAbs_acc[:, :], axis=1))
        nmseAbs_am_radius_db = 10*np.log10(np.mean(nmseAbs_am[:, :], axis=1))
        nmseAngle_pwd_cnn_radius_db = 10*np.log10(np.mean(nmseAngle_pwd_cnn[:, :], axis=1))
        nmseAngle_pm_radius_db = 10*np.log10(np.mean(nmseAngle_pm[:, :], axis=1))
        nmseAngle_acc_radius_db = 10*np.log10(np.mean(nmseAngle_acc[:, :], axis=1))
        nmseAngle_am_radius_db = 10*np.log10(np.mean(nmseAngle_am[:, :], axis=1))
        ssim_pwd_cnn_radius = np.mean(ssim_pwd_cnn[:, :], axis=1)
        ssim_pm_radius = np.mean(ssim_pm[:, :], axis=1)
        ssim_acc_radius = np.mean(ssim_acc[:, :], axis=1)
        ssim_am_radius = np.mean(ssim_am[:, :], axis=1)
        ac_pwd_cnn_radius_db = np.mean(ac_pwd_cnn[:, :], axis=1)
        ac_pm_radius_db = np.mean(ac_pm[:, :], axis=1)
        ac_acc_radius_db = np.mean(ac_acc[:, :], axis=1)
        ac_am_radius_db = np.mean(ac_am[:, :], axis=1)

        nmse_pwd_cnn_radius_db_B = 10*np.log10(np.mean(nmse_pwd_cnn_B[:, :], axis=1))
        nmse_pm_radius_db_B = 10*np.log10(np.mean(nmse_pm_B[:, :], axis=1))
        nmse_acc_radius_db_B = 10*np.log10(np.mean(nmse_acc_B[:, :], axis=1))
        nmse_am_radius_db_B = 10*np.log10(np.mean(nmse_am_B[:, :], axis=1))
        nmseAbs_pwd_cnn_radius_db_B = 10*np.log10(np.mean(nmseAbs_pwd_cnn_B[:, :], axis=1))
        nmseAbs_pm_radius_db_B = 10*np.log10(np.mean(nmseAbs_pm_B[:, :], axis=1))
        nmseAbs_acc_radius_db_B = 10*np.log10(np.mean(nmseAbs_acc_B[:, :], axis=1))
        nmseAbs_am_radius_db_B = 10*np.log10(np.mean(nmseAbs_am_B[:, :], axis=1))
        nmseAngle_pwd_cnn_radius_db_B = 10*np.log10(np.mean(nmseAngle_pwd_cnn_B[:, :], axis=1))
        nmseAngle_pm_radius_db_B = 10*np.log10(np.mean(nmseAngle_pm_B[:, :], axis=1))
        nmseAngle_acc_radius_db_B = 10*np.log10(np.mean(nmseAngle_acc_B[:, :], axis=1))
        nmseAngle_am_radius_db_B = 10*np.log10(np.mean(nmseAngle_am_B[:, :], axis=1))
        ssim_pwd_cnn_radius_B = np.mean(ssim_pwd_cnn_B[:, :], axis=1)
        ssim_pm_radius_B = np.mean(ssim_pm_B[:, :], axis=1)
        ssim_acc_radius_B = np.mean(ssim_acc_B[:, :], axis=1)
        ssim_am_radius_B = np.mean(ssim_am_B[:, :], axis=1)


        nmse_pwd_cnn_radius_db_D = 10*np.log10(np.mean(nmse_pwd_cnn_D[:, :], axis=1))
        nmse_pm_radius_db_D = 10*np.log10(np.mean(nmse_pm_D[:, :], axis=1))
        nmse_acc_radius_db_D = 10*np.log10(np.mean(nmse_acc_D[:, :], axis=1))
        nmse_am_radius_db_D = 10*np.log10(np.mean(nmse_am_D[:, :], axis=1))
        nmseAbs_pwd_cnn_radius_db_D = 10*np.log10(np.mean(nmseAbs_pwd_cnn_D[:, :], axis=1))
        nmseAbs_pm_radius_db_D = 10*np.log10(np.mean(nmseAbs_pm_D[:, :], axis=1))
        nmseAbs_acc_radius_db_D = 10*np.log10(np.mean(nmseAbs_acc_D[:, :], axis=1))
        nmseAbs_am_radius_db_D = 10*np.log10(np.mean(nmseAbs_am_D[:, :], axis=1))
        nmseAngle_pwd_cnn_radius_db_D = 10*np.log10(np.mean(nmseAngle_pwd_cnn_D[:, :], axis=1))
        nmseAngle_pm_radius_db_D = 10*np.log10(np.mean(nmseAngle_pm_D[:, :], axis=1))
        nmseAngle_acc_radius_db_D = 10*np.log10(np.mean(nmseAngle_acc_D[:, :], axis=1))
        nmseAngle_am_radius_db_D = 10*np.log10(np.mean(nmseAngle_am_D[:, :], axis=1))
        ssim_pwd_cnn_radius_D = np.mean(ssim_pwd_cnn_D[:, :], axis=1)
        ssim_pm_radius_D = np.mean(ssim_pm_D[:, :], axis=1)
        ssim_acc_radius_D = np.mean(ssim_acc_D[:, :], axis=1)
        ssim_am_radius_D = np.mean(ssim_am_D[:, :], axis=1)


        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_pwd_cnn_radius_db[idxs], 5, 1)], 'nmse_pwd_cnn_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_pm_radius_db[idxs], 5, 1)], 'nmse_pm_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_acc_radius_db[idxs], 5, 1)], 'nmse_acc_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_am_radius_db[idxs], 5, 1)], 'nmse_am_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pwd_cnn_radius_db[idxs], 5, 1)], 'nmseAbs_pwd_cnn_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pm_radius_db[idxs], 5, 1)], 'nmseAbs_pm_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_acc_radius_db[idxs], 5, 1)], 'nmseAbs_acc_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_am_radius_db[idxs], 5, 1)], 'nmseAbs_am_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pwd_cnn_radius_db[idxs], 5, 1)], 'nmseAngle_pwd_cnn_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pm_radius_db[idxs], 5, 1)], 'nmseAngle_pm_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_acc_radius_db[idxs], 5, 1)], 'nmseAngle_acc_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_am_radius_db[idxs], 5, 1)], 'nmseAngle_am_radius_db'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_pwd_cnn_radius[idxs], 5, 1)], 'ssim_pwd_cnn_radius'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_pm_radius[idxs], 5, 1)], 'ssim_pm_radius'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_acc_radius[idxs], 5, 1)], 'ssim_acc_radius'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_am_radius[idxs], 5, 1)], 'ssim_am_radius'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ac_pwd_cnn_radius_db[idxs], 5, 1)], 'ac_pwd_cnn_radius'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ac_pm_radius_db[idxs], 5, 1)], 'ac_pm_radius'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ac_acc_radius_db[idxs], 5, 1)], 'ac_acc_radius'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ac_am_radius_db[idxs], 5, 1)], 'ac_am_radius'+str(args.n_loudspeakers), folder=pgf_dataset_path)

        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_pwd_cnn_radius_db_B[idxs], 5, 1)], 'nmse_pwd_cnn_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_pm_radius_db_B[idxs], 5, 1)], 'nmse_pm_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_acc_radius_db_B[idxs], 5, 1)], 'nmse_acc_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_am_radius_db_B[idxs], 5, 1)], 'nmse_am_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pwd_cnn_radius_db_B[idxs], 5, 1)], 'nmseAbs_pwd_cnn_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pm_radius_db_B[idxs], 5, 1)], 'nmseAbs_pm_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_acc_radius_db_B[idxs], 5, 1)], 'nmseAbs_acc_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_am_radius_db_B[idxs], 5, 1)], 'nmseAbs_am_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pwd_cnn_radius_db_B[idxs], 5, 1)], 'nmseAngle_pwd_cnn_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pm_radius_db_B[idxs], 5, 1)], 'nmseAngle_pm_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_acc_radius_db_B[idxs], 5, 1)], 'nmseAngle_acc_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_am_radius_db_B[idxs], 5, 1)], 'nmseAngle_am_radius_db_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_pwd_cnn_radius_B[idxs], 5, 1)], 'ssim_pwd_cnn_radius_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_pm_radius_B[idxs], 5, 1)], 'ssim_pm_radius_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_acc_radius_B[idxs], 5, 1)], 'ssim_acc_radius_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_am_radius_B[idxs], 5, 1)], 'ssim_am_radius_B'+str(args.n_loudspeakers), folder=pgf_dataset_path)

        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_pwd_cnn_radius_db_D[idxs], 5, 1)], 'nmse_pwd_cnn_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_pm_radius_db_D[idxs], 5, 1)], 'nmse_pm_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_acc_radius_db_D[idxs], 5, 1)], 'nmse_acc_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmse_am_radius_db_D[idxs], 5, 1)], 'nmse_am_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pwd_cnn_radius_db_D[idxs], 5, 1)], 'nmseAbs_pwd_cnn_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pm_radius_db_D[idxs], 5, 1)], 'nmseAbs_pm_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_acc_radius_db_D[idxs], 5, 1)], 'nmseAbs_acc_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAbs_am_radius_db_D[idxs], 5, 1)], 'nmseAbs_am_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pwd_cnn_radius_db_D[idxs], 5, 1)], 'nmseAngle_pwd_cnn_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pm_radius_db_D[idxs], 5, 1)], 'nmseAngle_pm_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_acc_radius_db_D[idxs], 5, 1)], 'nmseAngle_acc_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(nmseAngle_am_radius_db_D[idxs], 5, 1)], 'nmseAngle_am_radius_db_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_pwd_cnn_radius_D[idxs], 5, 1)], 'ssim_pwd_cnn_radius_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_pm_radius_D[idxs], 5, 1)], 'ssim_pm_radius_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_acc_radius_D[idxs], 5, 1)], 'ssim_acc_radius_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)
        plot2pgf([r_axis_plot[idxs], sg.savgol_filter(ssim_am_radius_D[idxs], 5, 1)], 'ssim_am_radius_D'+str(args.n_loudspeakers), folder=pgf_dataset_path)


        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_pwd_cnn_radius_db[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_pm_radius_db[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_acc_radius_db[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_am_radius_db[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE$', fontsize=35)
        plt.show()
        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_pwd_cnn_radius_db_B[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_pm_radius_db_B[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_acc_radius_db_B[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_am_radius_db_B[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{b}$', fontsize=35)
        plt.show()
        plt.figure(figsize=(20, 9))
        #plt.subplot(212)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_pwd_cnn_radius_db_D[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_pm_radius_db_D[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_acc_radius_db_D[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmse_am_radius_db_D[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{d}$', fontsize=35)
        plt.show()

        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pwd_cnn_radius_db[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pm_radius_db[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_acc_radius_db[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_am_radius_db[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Abs}$', fontsize=35)
        plt.show()
        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pwd_cnn_radius_db_B[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pm_radius_db_B[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_acc_radius_db_B[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_am_radius_db_B[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Abs, b}$', fontsize=35)
        plt.show()
        plt.figure(figsize=(20, 9))
        #plt.subplot(212)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pwd_cnn_radius_db_D[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_pm_radius_db_D[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_acc_radius_db_D[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAbs_am_radius_db_D[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Abs, d}$', fontsize=35)
        plt.show()

        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pwd_cnn_radius_db[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pm_radius_db[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_acc_radius_db[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_am_radius_db[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Angle}$', fontsize=35)
        plt.show()
        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pwd_cnn_radius_db_B[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pm_radius_db_B[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_acc_radius_db_B[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_am_radius_db_B[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Angle, b}$', fontsize=35)
        plt.show()
        plt.figure(figsize=(20, 9))
        #plt.subplot(212)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pwd_cnn_radius_db_D[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_pm_radius_db_D[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_acc_radius_db_D[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(nmseAngle_am_radius_db_D[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$MSE [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend([ '$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$MSE_{Angle, d}$', fontsize=35)
        plt.show()

        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(ssim_pwd_cnn_radius_B[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(ssim_pm_radius_B[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(ssim_acc_radius_B[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(ssim_am_radius_B[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$SSIM$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend(['$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$SSIM_{b}$', fontsize=35)
        plt.show()

        plt.figure(figsize=(20, 9))
        #plt.subplot(211)
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(ac_pwd_cnn_radius_db[idxs], 5, 1), 'k-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(ac_pm_radius_db[idxs], 5, 1), 'r*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(ac_acc_radius_db[idxs], 5, 1), 'g*-')
        plt.plot(r_axis_plot[idxs], sg.savgol_filter(ac_am_radius_db[idxs], 5, 1), 'b*-')
        plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$AC [dB]$', fontsize=35)
        plt.tick_params(axis='both', which='major', labelsize=30)
        plt.legend(['$\mathrm{MZ-DLPM}$', '$\mathrm{PM}$', '$\mathrm{ACC}$', '$\mathrm{AM}$'], prop={"size": 30})
        plt.title('$AC$', fontsize=35)

        #plt.subplot(212)
        #plt.plot(r_axis_plot, ssim_pwd_cnn_radius_D, 'rd-')
        #plt.plot(r_axis_plot, ssim_pm_radius_D, 'k*-')
        #plt.xlabel('$r [m]$', fontsize=35), plt.ylabel('$SSIM$', fontsize=35)
        #plt.tick_params(axis='both', which='major', labelsize=30)
        #plt.legend(['$\mathrm{PWD_{CNN}}$', '$\mathrm{PM}$'], prop={"size": 30})
        #plt.title('Dark - SSIM')
        plt.show()

        print('done')

if __name__ == '__main__':
    main()
    print("Plots Ended")